<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 The GreyCat Authors.  All rights reserved.
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>greycat-taskide</artifactId>
    <version>5.1-SNAPSHOT</version>
    <name>greycat-taskide</name>

    <parent>
        <artifactId>greycat-parent</artifactId>
        <groupId>com.datathings</groupId>
        <version>5.1-SNAPSHOT</version>
        <relativePath>../..</relativePath>
    </parent>

    <properties>
        <header.path>${basedir}/../../HEADER</header.path>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.datathings</groupId>
            <artifactId>greycat</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.datathings</groupId>
            <artifactId>greycat-websocket</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <id>main.ts.compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                def ant = new AntBuilder()
                                ant.echo("install greycat")
                                def installGreyCatProcess = "npm install ${basedir}/../../greycat/target/classes-npm".execute(null, new File("${basedir}/src/main/web"))
                                installGreyCatProcess.waitForProcessOutput(System.out, System.err)
                                if (installGreyCatProcess.exitValue() != 0) {
                                    exit
                                }

                                ant.echo("install websocket")
                                def installGreyCatWSProcess = "npm install ${basedir}/../websocket/target/classes-npm".execute(null, new File("${basedir}/src/main/web"))
                                installGreyCatWSProcess.waitForProcessOutput(System.out, System.err)
                                if (installGreyCatWSProcess.exitValue() != 0) {
                                    exit
                                }

                                ant.echo("install ml")
                                def installGreyCatMLProcess = "npm install ${basedir}/../ml/target/classes-npm".execute(null, new File("${basedir}/src/main/web"))
                                installGreyCatMLProcess.waitForProcessOutput(System.out, System.err)
                                if (installGreyCatMLProcess.exitValue() != 0) {
                                    exit
                                }

                                ant.echo("install")
                                def installProcess = "npm install".execute(null, new File("${basedir}/src/main/web"))
                                installProcess.waitForProcessOutput(System.out, System.err)
                                if (installProcess.exitValue() != 0) {
                                    exit
                                }
                                def buildProcess = "npm run build".execute(null, new File("${basedir}/src/main/web"))
                                buildProcess.waitForProcessOutput(System.out, System.err)
                                if (buildProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.copydir(src: "${basedir}/src/main/web/build", dest: "${basedir}/target/classes/taskide", forceoverwrite: "true")
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>main.ts.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                def ant = new AntBuilder()
                                ant.delete(dir:"${basedir}/src/main/web/node_modules",failonerror:true)
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
