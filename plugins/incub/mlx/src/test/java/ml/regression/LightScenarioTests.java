/**
 * Copyright 2017 The GreyCat Authors.  All rights reserved.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ml.regression;

import org.junit.Test;
import org.mwg.*;
import org.mwg.internal.scheduler.NoopScheduler;
import org.mwg.ml.AbstractMLNode;
import org.mwg.mlx.MLXPlugin;
import org.mwg.mlx.algorithm.AbstractLinearRegressionNode;
import org.mwg.mlx.algorithm.regression.LinearRegressionNode;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * Created by andre on 5/24/2016.
 */
public class LightScenarioTests extends AbstractLinearRegressionTest{

    public static final int NUM_SWITCHES = 10;

    public static final String SWITCHES_STRING = "s0;s1;s2;s3;s4;s5;s6;s7;s8;s9";

    public static final String FEATURES[] = new String[]{"s0","s1","s2","s3","s4","s5","s6","s7", "s8", "s9"};

    private static final int f1Array[] = new int[]{5,
            8, 7, 3, 4, 4, 4, 6, 8, 8, 9, 3, 7, 3, 2, 4, 2, 2, 6, 9, 6, 2, 0, 9, 4, 9, 8, 3, 7, 2, 5, 4, 0, 6, 3, 5, 9, 0, 5, 4, 5, 0, 7, 7, 7, 2, 0, 8, 0, 7, 2,
            3, 6, 5, 6, 5, 8, 9, 4, 4, 0, 1, 6, 3, 8, 6, 8, 4, 5, 8, 9, 6, 5, 8, 2, 7, 2, 1, 1, 7, 8, 2, 1, 8, 5, 9, 9, 5, 9, 0, 7, 6, 4, 0, 3, 5, 1, 1, 6, 0, 4,
            2, 4, 5, 4, 4, 8, 3, 3, 7, 7, 0, 1, 3, 7, 6, 7, 5, 0, 9, 8, 3, 0, 6, 6, 6, 1, 9, 4, 9, 8, 1, 0, 5, 5, 6, 4, 1, 6, 6, 8, 8, 1, 2, 3, 0, 9, 5, 2, 3, 4,
            2, 3, 7, 1, 5, 7, 4, 7, 7, 9, 6, 7, 9, 3, 6, 1, 6, 8, 5, 7, 8, 2, 5, 6, 0, 0, 9, 5, 8, 0, 0, 5, 6, 8, 7, 8, 9, 2, 9, 1, 0, 8, 3, 5, 2, 1, 5, 9, 6, 6,
            7, 3, 8, 2, 7, 2, 7, 8, 5, 4, 1, 6, 9, 8, 8, 3, 3, 4, 0, 4, 9, 9, 2, 0, 8, 0, 6, 1, 8, 6, 5, 0, 0, 6, 9, 9, 8, 4, 6, 1, 9, 8, 9, 7, 8, 8, 2, 6, 7, 9,
            1, 9, 8, 8, 4, 1, 2, 9, 5, 5, 4, 6, 0, 1, 5, 8, 7, 6, 9, 3, 2, 0, 1, 3, 0, 5, 3, 2, 9, 6, 3, 8, 1, 8, 3, 5, 9, 6, 8, 1, 8, 4, 8, 6, 1, 6, 9, 3, 1, 4,
    };

    private static final int f2Array[] = new int[]{8,
            2, 0, 7, 9, 0, 6, 9, 7, 8, 4, 6, 4, 4, 4, 6, 7, 9, 0, 1, 8, 7, 9, 2, 6, 4, 2, 5, 3, 2, 9, 6, 7, 0, 0, 4, 7, 5, 7, 8, 2, 5, 8, 9, 2, 0, 4, 3, 6, 7, 9,
            6, 8, 1, 9, 9, 8, 2, 0, 3, 4, 2, 4, 3, 4, 6, 8, 6, 4, 7, 1, 6, 5, 8, 3, 1, 8, 3, 5, 9, 1, 3, 2, 2, 6, 5, 8, 7, 5, 2, 6, 5, 3, 9, 3, 7, 0, 4, 6, 6, 9,
            9, 2, 7, 8, 4, 4, 7, 7, 7, 6, 1, 5, 0, 8, 8, 7, 2, 7, 5, 0, 7, 3, 4, 4, 7, 9, 9, 7, 3, 1, 7, 7, 4, 5, 0, 9, 5, 1, 5, 4, 6, 8, 7, 3, 9, 5, 1, 5, 2, 1,
            3, 5, 6, 0, 7, 6, 9, 2, 1, 8, 4, 3, 1, 7, 9, 4, 6, 3, 9, 8, 2, 2, 7, 4, 0, 7, 7, 4, 6, 1, 1, 5, 1, 6, 4, 9, 9, 0, 2, 9, 8, 5, 7, 7, 9, 0, 2, 6, 3, 1,
            9, 1, 6, 9, 5, 5, 5, 1, 9, 5, 2, 6, 1, 2, 7, 9, 4, 8, 7, 2, 2, 0, 7, 0, 0, 8, 4, 6, 2, 7, 5, 3, 5, 4, 1, 1, 9, 0, 6, 8, 5, 0, 9, 6, 5, 0, 3, 9, 9, 1,
            7, 3, 6, 6, 1, 4, 0, 6, 9, 3, 4, 0, 7, 9, 1, 7, 1, 8, 4, 9, 1, 6, 5, 9, 2, 9, 6, 8, 0, 5, 0, 4, 0, 0, 7, 0, 5, 6, 4, 6, 7, 9, 8, 2, 9, 2, 7, 0, 0, 8,
    };

    private static final double f2DoubleArray[] = new double[]{0.7311469360199058,
            0.9014476240300544, 0.49682259343089075, 0.9858769332362016, 0.8571240443456863, 0.9874208338984266, 0.2281579303734177, 0.07479382813444624, 0.7431577182910525,
            0.9495832704567262, 0.03051322863820438, 0.6916553793139485, 0.85169089403032, 0.056747142601520584, 0.4082850955300814, 0.3523887920698725, 0.9936866413660749,
            0.5619453390593078, 0.4759845405345582, 0.04941147821497294, 0.5822723681370429, 0.8512429683406786, 0.22867383417976428, 0.1531858692059932, 0.9639222864568235,
            0.23262564370920258, 0.6166416559599189, 0.6088954021459719, 0.2476189990121238, 0.8393600882564604, 0.688995384279028, 0.7976571472083265, 0.12372421958696544,
            0.10757452405954704, 0.0327637917952418, 0.9326626471787404, 0.2668269248022821, 0.5544075375089187, 0.2272671480188173, 0.1428654042485742, 0.05062722166922129,
            0.1309260660406093, 0.057925810818850176, 0.4603101967502232, 0.4679527340020191, 0.25311429486803916, 0.7893423923933826, 0.7719256219680546, 0.3452932822722877,
            0.7245872697160531, 0.8844071540040709, 0.42257789416258673, 0.16877926472722526, 0.15628413487414305, 0.17433951002168424, 0.5634106963883608, 0.09731759479562752,
            0.16124780874055467, 0.6339934007057019, 0.5279721796198867, 0.028638397130214432, 0.5566992703196468, 0.5974176954063306, 0.4883570215029308, 0.9052948541002466,
            0.04096635883229505, 0.4605773808382321, 0.394567771540121, 0.800197298329145, 0.329428443953379, 0.6613049716683935, 0.732526473374695, 0.705052012357254,
            0.5314898191258518, 9.658131997107855E-4, 0.9496440080949906, 0.3601142402233627, 0.6296963837314902, 0.17798499826006053, 0.49158108787167865, 0.9099537420082608,
            0.28246173909513883, 0.7402977160413496, 0.2698117937946033, 0.6474704570182054, 0.8134702432632552, 0.5319486766498561, 0.03682641597334024, 0.6171870521720574,
            0.17367614825204647, 0.10848088441172232, 0.5842876062991244, 0.38888385735700337, 0.8659198449182554, 0.5264170813399361, 0.8991800956486826, 0.8839309721154954,
            0.3075330789586921, 0.37405274743087014, 0.4139706200333181, 0.7392114080610992, 0.8729075335077544, 0.903941740660769, 0.2690217657999502, 0.3273179492886942,
            0.9058518230967384, 0.6518717137586608, 0.0689794539400479, 0.2167459373203977, 0.3206640780271456, 0.9827886680428397, 0.9595806005026282, 0.5520927190803022,
            0.02119865251594466, 0.5910454748749061, 0.9773044583876472, 0.5618139135649504, 0.2588070179681504, 0.10051236937636321, 0.5315165219803307, 0.15987553966209367,
            0.22288467892696084, 0.559502068961777, 0.5672321305236155, 0.39768031293853023, 0.6118572583882967, 0.8061258173767125, 0.42635170582142146, 0.3439352883083122,
            0.6677905161053023, 0.391610689096085, 0.6761976699471008, 0.8226669304390293, 0.17441076473177264, 0.9922732518658991, 0.2064083996230508, 0.3233794094165856,
            0.2161737553476435, 0.015257658562357168, 0.7087220628269457, 0.312390165690246, 0.07512109453395721, 0.4088113126000701, 0.24890922898519707, 0.12066638197918023,
            0.5026157903874977, 0.524784519741372, 0.01608980319530473, 0.5610249289825382, 0.7446492072217938, 0.24920528159697508, 0.49189649632813603, 0.43634731675180816,
            0.12226375684226065, 0.516193935056564, 0.22042364699419448, 0.1405004377765885, 0.6727369522439791, 0.7511465152880721, 0.0796264303890879, 0.6249427159472043,
            0.34252439807016843, 0.7510301899707712, 0.4558126044625278, 0.10653454185717681, 0.4895602222577171, 0.0027973293591648796, 0.005094929124368153, 0.02586084923849341,
            3.657342678561326E-4, 0.465339974163995, 0.7491493950776422, 0.9304126677061736, 0.15651814925426866, 0.39606940915366096, 0.09735077622453536, 0.1532637863501467,
            0.4953828623993284, 0.8901202234340622, 0.013333548287132846, 0.38541747638926216, 0.3016146656261751, 0.4183424629877571, 0.9512528069136365, 0.49878742826283784,
            0.0387842331736058, 0.7996588102095687, 0.3754965903118336, 0.26681595882495834, 0.9845885174857412, 0.7240287516673876, 0.6473270851964268, 0.9510219125861245,
            0.5684545016938611, 0.15417473855712616, 0.8129053884970521, 0.07430951883804882, 0.4269480447870745, 0.6773903233149525, 0.35938048626828145, 0.08565837004681676,
            0.990250379951694, 0.15316377313332075, 0.3191999966353528, 0.035854132944467376, 0.4920671657385578, 0.8080147134555291, 0.1975268431092232, 0.8302085492079901,
            0.655685684646907, 0.2658559418965676, 0.07362216959554013, 0.10175596590637692, 0.9504984106714716, 0.8703557830083908, 0.8842819839215557, 0.2572033981252123,
            0.23616153911985505, 0.05519117730539924, 0.33589094283520227, 0.7879493745422822, 0.8156596440173186, 0.44874556589224845, 0.11138381198194824, 0.5097768443834603,
            0.40389860087956186, 0.8617190962341145, 0.03938131847159643, 0.9973632376244879, 0.2850505952310518, 0.2992837616371339, 0.674993776919204, 0.11354124220090711,
            0.9797269084362303, 0.6638294441026463, 0.30526256524694506, 0.1982818067412474, 0.07215521891456822, 0.8700107372607581, 0.7369358964391346, 0.17866037786576694,
            0.45789006245914654, 0.6807194642218988, 0.35025206230421535, 0.5886066641564274, 0.1641866382770174, 0.6907705173400749, 0.8096296849583574, 0.24602665865456985,
            0.06801967024472855, 0.5345040994532195, 0.5106413505716435, 0.12492554295977976, 0.2908303718113253, 0.5741700661201353, 0.31237317052017943, 0.7814483392451523,
            0.7844366120535318, 0.03787572676751405, 0.3552500907040781, 0.545294722200517, 0.6391424557624495, 0.8190408712043864, 0.7966321850910277, 0.5717535076302833,
            0.9429351104550227, 0.9237193392532496, 0.10996491175436907, 0.7646409683641173, 0.5997586763568259, 0.8578093338341763, 0.18799232567743174, 0.5267166621934684,
            0.3752059898755802, 0.08308955578388699, 0.8665184993455891, 0.2716892963008023, 0.579570846365692, 0.03918195294987692, 0.6424297788125943, 0.6407142517755652,
            0.22105526395072939, 0.12795575287360206, 0.29816609378182957, 0.4063231095614802, 0.16602691366645028, 0.48755196450357874, 0.8645571599833994, 0.11801567349542574,
            0.828574639042742, 0.345121423260349, 0.8549148884293868, 0.6462823599502466, 0.1782105756044361, 0.23053308793964333, 0.9855007915148916, 0.9156155562608144,
            0.4024195276322252, 0.357724212207323, 0.6609631188264727, 0.2821065470195572, 0.38985723897331903, 0.0360271977752582, 0.34806550342784814, 0.2075139215903654,
            0.31035165913373464, 0.060722669006648244, 0.587004787338682, 0.10922869650606215, 0.9594619025589539, 0.6502318925722474, 0.7968433286324171, 0.5243502955519889,
            0.20820174028299898, 0.646776127423444, 0.22005626992596394, 0.016126207110646273, 0.8526359138236185, 0.3779941906364148, 0.32092227383098826, 0.5722981175693279,
            0.3934089769743113, 0.7889238643228068, 0.7034613682365229, 0.5974352485130439, 0.7918682288295184, 0.19691671961644464, 0.14685147043804514, 0.985125631660387,
            0.047293438686898615, 0.29646985336031073, 0.6697305693056564, 0.17093472668444454, 0.5188479854174666, 0.8466225920857334, 0.6295188496372633, 0.5133295239035458,
            0.27621759309108274, 0.8104793598361136, 0.7388712623394688, 0.8273062237169778, 0.4045040410913586, 0.5845852374216303, 0.5385977725434715, 0.4042475587503047,
            0.11179326764452902, 0.3552934775264329, 0.3048648164225013, 0.391575890980587, 0.6919184122842192, 0.5499293597137185, 0.5882186329298714, 0.9770565003317181,
            0.8802902987141683, 0.8124681441651224, 0.582946814143801, 0.4251449188930201, 0.9072691248954138, 0.9266094037743227, 0.30752194544452016, 0.6465614596191521,
            0.6014028940660912, 0.6335436693338891, 0.140346933576335, 0.647314420552416, 0.22395940532421754, 0.34737172133461747, 0.5997489144247277, 0.8996831845543227,
            0.326530542953707, 0.3580509165531077, 0.3831444085258233, 0.40521141957343854, 0.8150889677584953, 0.22990657363036293, 0.5875258993758264, 0.9785490987331227,
            0.5767288663471143, 0.7531609109392537, 0.7218954924286732, 0.07102184643166232, 0.479423932062914, 0.9865964381321229, 0.5919989733886423, 0.27409473241806315,
            0.29048754700777923, 0.6413833809215599, 0.3886891612888912, 0.4954368387763919, 0.07602147820272909, 0.2992667928768955, 0.34347486390225235, 0.6840817612457731,
            0.9414909182159854, 0.7327211022414648, 0.12828738417610763, 0.896218868414807, 0.5526655703818898, 0.9003453916705966, 0.7712244050311341, 0.439438484291096,
            0.7365177324569616, 0.027685902904748927, 0.23600586139846458, 0.810793565744522, 0.6032699238867304, 0.5518366581037394, 0.9701049473254846, 0.15282969446170513,
            0.0536364711841123, 0.6075829961442476, 0.6649920282590784, 0.991773786689193, 0.23940455526457316, 0.16351724890265618, 0.19165772752394317, 0.09336149721329745,
            0.5308522177763583, 0.8784692541938774, 0.17555606804763513, 0.3743219940799384, 0.8111020813779294, 0.24175898987551048, 0.9573367857285272, 0.9413278144924473,
            0.46536138775278746, 0.5851923954056718, 0.7492115161089936, 0.4942572526680452, 0.26210011541420475, 0.11038557025157247, 0.6415252611976627, 0.5269044800744697,
            0.4335708226493614, 0.16191673476346313, 0.7400815339164809, 0.9858132300866939, 0.6546757391270801, 0.594969116716619, 0.12199561693421435, 0.3066975365435043,
            0.292036997728493, 0.23554220955458693, 0.486327189122595, 0.03795319747336823, 0.2492289581830197, 0.11197302549235155, 0.34547013835445817, 0.5820516773350712,
            0.9694821703012093, 0.3484225314189222, 0.3542539173723468, 0.9381483699166198, 0.6737703524792756, 0.3541471812132735, 0.9059373993981342, 0.7130250641087017,
            0.7100432709867762, 0.2167890200744499, 0.43775246459905537, 0.08252613923239793, 0.9684702380887731, 0.013581918597177056, 0.9833817193683553, 0.8319372600830164,
            0.6779100294133735, 0.09128621580780394, 0.3857306122476959, 0.08129378672497445, 0.5404249326778569, 0.2338268631132645, 0.2405812666086068, 0.810395712388732,
            0.08350841235617945, 0.03602565466564345, 0.0801917978811002, 0.8383446829230911, 0.3137964799273857, 0.7324810140946323, 0.5256312139074233, 0.4837079040515784,
            0.241385917970516, 0.19256370226964314, 0.13761697086701474, 0.7339526737050661, 0.6104823561257292, 0.7856602139497234, 0.47784838404894114, 0.38658464591351127,
            0.21995452844493435, 0.345210269775187, 0.4563059967669878, 0.28946119041691265, 0.5464709556706111, 0.5157484190735432, 0.3847134253214627, 0.5040414875431695,
            0.9932480658975648, 0.35407415143436916, 0.28233467445361216, 0.9428730739698473, 0.979039669220994, 0.17383878945337006, 0.8875067840388771, 0.7914037844991884,
            0.25484973148887147, 0.2722514869084215, 0.5167837913358029, 0.8142477622799505, 0.2899512245760807, 0.3582710051191794, 0.3832949236690065, 0.4673222594362876,
            0.3041464906177481, 0.21356349757210502, 0.23689640737850504, 0.5898117639811318, 0.5398049326592761, 0.360671102104992, 0.2209226776441131, 0.33370495949619206,
            0.6650663002409332, 0.2872498732953134, 0.6538195325261927, 0.9036885834864233, 0.7786989780707565, 0.08089982628943193, 0.03866837171214921, 0.6264720078890512,
            0.34745438669726336, 0.16602386208687925, 0.9795867234926801, 0.8461548473432007, 0.5483599868045621, 0.20231619266247947, 0.8412178040696633, 0.151039357581219,
            0.9112451884749344, 0.10389558064686166, 0.9259973398435103, 0.47732826796613104, 0.8608960627479236, 0.5687619280117363, 0.663613130539076, 0.7064377289282222,
            0.7435857178178713, 0.4701694715524374, 0.8080493057084107, 0.4751942021440304, 0.1893297416255728, 0.9546736112350585, 0.9198333465282676, 0.0519731999391001,
            0.20906687365298982, 0.1160224325742516, 0.4745812288087886, 0.29687668627358754, 0.25506683793991414, 0.6697283308339071, 0.783662107561388, 0.9203353553394623,
            0.5832191079349643, 0.14006873011286836, 0.5387802537511773, 0.4820604598469772, 0.6474576559215467, 0.6894294577274345, 0.19949967697637505, 0.831059664285123,
            0.9294282253816426, 0.8693180061853388, 0.631211836547735, 0.9774699560038697, 0.5606067114043691, 0.25303836039223493, 0.37077476492983785, 0.7082498364314654,
            0.3294280390716886, 0.12193254310559021, 0.648027824765286, 0.6113119718405328, 0.18258730897988462, 0.1202588467322957, 0.8236127865344681, 0.5564669826725882,
            0.12752584814210977, 0.06819014744271912, 0.2170090228134266, 0.09658758750460184, 0.5222169648827486, 0.9280800777276876, 0.39341666834808486, 0.6986913675082905,
            0.09871712478112138, 0.2560588546537945, 0.8540983212993808, 0.1921802926373748, 0.7085504297441062, 0.3391845361008562, 0.7320166043796065, 0.3302630503617239,
    };

    private static final double f3DoubleArray[] = new double[]{0.731057369148862,
            0.07099203475193139, 0.06712000939049956, 0.768156984078079, 0.22733466107144407, 0.6603196166875382, 0.806673557557068, 0.029817676716547004, 0.8111701180817663,
            0.9454162249694203, 0.15273360478742526, 0.910276257643282, 0.9991462683878385, 0.539992632542705, 0.9775124263642735, 0.15843782637336135, 0.5490886638085233,
            0.09354586616359473, 0.44339036056222936, 0.4128618847449528, 0.28649757692591293, 0.1692379076854107, 0.4874576197510474, 0.9431689547993323, 0.8906096714824934,
            0.5357579968781104, 0.5716705527329732, 0.2541151994281521, 0.690779419799508, 0.961211235790107, 0.3337848547628536, 0.2600071331985876, 0.41937761671871987,
            0.1253974621306525, 0.7478608051088323, 0.4685741246808127, 0.16916260493992685, 0.4514138761997111, 0.28301840077728546, 0.5011109778016111, 0.5110870978098864,
            0.4983359656767432, 0.3352534577643591, 0.3196490906395202, 0.8427615656552719, 0.05380073095516491, 0.899507952297759, 0.7321093219110745, 0.558303116770903,
            0.21863733402970997, 0.04782127936814473, 0.1028352068660443, 0.5570562518434271, 0.5852602449889055, 0.2842715239489271, 0.7086007358482168, 0.9416800228050901,
            0.07735988932376492, 0.25854891079417097, 0.8491318549337953, 0.4953536576688765, 0.14049713704809663, 0.637385920877522, 0.6463762119132027, 0.6733608138880192,
            0.7515271894603059, 0.15670241626826587, 0.44820130342234743, 0.39607013191910034, 0.14934917694689753, 0.007205521923755898, 0.8898961712854122, 0.8883378104369467,
            0.28029866592374386, 0.7423180091029861, 0.9607970570737874, 0.1746157103885453, 0.6985692284723288, 0.8396911895373064, 0.8735532068346417, 0.6095559720788049,
            0.06537111223316006, 0.8961911271076665, 0.13999362416541627, 6.617133634586603E-4, 0.4501040343133301, 0.19113009595708086, 0.020251651713939722, 0.4625401024526845,
            0.35264236715158326, 0.013647528223986516, 0.4307488087333372, 0.13157303382009888, 0.73790068666609, 0.7175281529689166, 0.4718353504521582, 0.2653274440277731,
            0.4021684212906741, 0.9403771716918614, 0.9673297125125532, 0.052786068836967015, 0.6752722226323379, 0.8039557230017018, 0.7958947745710052, 0.669486393782621,
            0.8034453731889909, 0.1986122945256864, 0.3381338438007523, 0.725913831592282, 0.3548536382409676, 0.4471285298440739, 0.06348483709293695, 0.27800313229934215,
            0.6430472325336276, 0.7419312011143845, 0.13743634674805316, 0.9953592038979245, 0.47317933552658764, 0.754504394588114, 0.9422845107117752, 0.9158170535808153,
            0.4816509295481718, 0.7269686467340601, 0.5735949494455608, 0.45421790389397554, 0.961913482759883, 0.17317760332348553, 0.6997296710476099, 0.9787864528683661,
            0.3474797889870944, 0.04031410181871342, 0.6532434729516527, 0.32025221081146005, 0.45776456303370405, 0.8118516737494696, 0.2606503666154224, 0.03686553113134727,
            0.20319674580313296, 0.5688794855829737, 0.71100553688175, 0.12271665634897289, 0.6931149281980958, 0.4691720515568597, 0.7139435867517026, 0.11727419585784116,
            0.5932785534771989, 0.4520172758626947, 0.3042594303603623, 0.2508171045504096, 0.1393973709556603, 0.23170000293606952, 0.9128130942069408, 0.3434417540708049,
            0.4289020460105335, 0.8036702484912456, 0.7424855231908398, 0.6645843477730902, 0.4852491670320155, 0.7548087050721954, 0.06310723718607891, 0.8555056419227539,
            0.11737403984477024, 0.6428344608824959, 0.7707274617131044, 0.318943558677113, 0.7814753841659098, 0.5897831809629971, 0.4442863596988641, 0.18814683068568916,
            0.49313578024743554, 0.020616248850590213, 0.17669842734724506, 0.10176064386884087, 0.3348525133307808, 0.17040483455137545, 0.6575506132434801, 0.5315427629167199,
            0.2573734960768034, 0.5821647991834445, 0.34106350112757355, 0.3366471297019983, 0.6828035409294828, 0.3223022697612188, 0.045659900444109836, 0.551219093537638,
            0.883266004716539, 0.05176143207851247, 4.2982200695784734E-4, 0.15130435019780164, 0.2309760612663575, 0.40834948470432164, 0.17897676111638394, 0.6925819315245043,
            0.19390099814927297, 0.37934689518743014, 0.7425751426517744, 0.26218864954398624, 0.3857544064773397, 0.47339255095253774, 0.5522638196226606, 0.14591114914034398,
            0.06989072099154114, 0.5367679747414424, 0.0034468355857457667, 0.9762784510905399, 0.2637368940333725, 0.0015862342213264213, 0.8867667157497988, 0.8975966555726893,
            0.9937188726249104, 0.2020244200304152, 0.5854618118419748, 0.4607247637409747, 0.31021001091343103, 0.14962179301872147, 0.6821140858173087, 0.5433984030747427,
            0.3878496752137214, 0.8197977027741722, 0.9666391442111191, 0.5811662384272672, 0.4086501353735301, 0.5691269869227856, 0.9125655982049256, 0.7895116871957717,
            0.9536302170379503, 0.7765427939234781, 0.9200963713350777, 0.8594899208842066, 0.31328456325395027, 0.1815198514165487, 0.01213937903949358, 0.8172187848709895,
            0.46801775053910344, 0.678424144153278, 0.21344095435917088, 0.35181907418159986, 0.4867426558178938, 0.518597233690589, 0.5431501377040108, 0.9369083354943415,
            0.7451627490338391, 0.970377132541902, 0.40758779533695766, 0.4975094481980725, 0.6748287196016153, 0.4921394749789002, 0.19268914164420403, 0.20724363540432178,
            0.719879319536843, 0.38457632616103765, 0.024534490266347242, 0.23993490010833773, 0.8004477109407171, 0.705812464806204, 0.9915773426849086, 0.9452610348394019,
            0.8600339172086866, 0.9565915990033415, 0.6036251886982479, 0.9698439442333463, 0.008714921167240153, 0.6726482664478344, 0.9003229011891665, 0.3031799281681614,
            0.36488395141961194, 0.597513594533524, 0.4158345614330555, 0.09206836629319026, 0.9452810853195285, 0.5513857550471927, 0.15661438792057558, 0.3377051911745761,
            0.8563971916920685, 0.4603296920484885, 0.8556030388188667, 0.2663649663221117, 0.5999040629089158, 0.264952072811126, 0.028880813084258716, 0.24760374246806904,
            0.5205834368530776, 0.5888316109550686, 0.7797544709894324, 0.6231720942767104, 0.2972983026172157, 0.11436678231248387, 0.8704498294622082, 0.7053361796563266,
            0.9058697207376979, 0.5873361335259129, 0.313027678029542, 0.5050618116287046, 0.6672934257335772, 0.251349395660337, 0.6188354155805668, 0.458524906580165,
            0.8355499887834449, 0.29949987907638276, 0.8897530041529482, 0.5346691567088234, 0.676333147655269, 0.6229119146979505, 0.13468603564731463, 0.6270397991059958,
            0.14134109255164462, 0.7345097814863685, 0.5512050533078823, 0.0598797419739574, 0.052345775403406236, 0.25121732075931924, 0.024924813165921322, 0.3714829971385317,
            0.17507562673364163, 0.7289301806581457, 0.7681629959667501, 0.27705685549033865, 0.6850174781264408, 0.9619856714960974, 0.8446128416233004, 0.8588536840847645,
            0.3055635078319052, 0.0824878892615335, 0.30820970647144563, 0.5830893618601054, 0.8334997846092659, 0.9247285123377325, 0.8220668338815008, 0.7011744935859208,
            0.857653005338469, 0.15607655513941254, 0.9173008152170693, 0.9570417015438927, 0.22358221418811441, 0.6180933867565055, 0.501762524244116, 0.2928602929897197,
            0.20052301284203822, 0.1702615391638288, 0.8351350468041936, 0.422187172048092, 0.36636168135361513, 0.08359942857176994, 0.9495547342542017, 0.7226112590511188,
            0.9422372624356216, 0.6925663532442625, 0.41385723391627116, 0.8892057228741987, 0.6804396176950892, 0.581045112659935, 0.4147459408777745, 0.1856108239705192,
            0.4375921878996327, 0.0518223923683474, 0.35962481925878165, 0.9313275743587601, 0.2496781906981319, 0.008869974318929663, 0.5935338483477535, 0.07181023589426316,
            0.06628935609915632, 0.6678625508912037, 0.3665696450986441, 0.2922039295542449, 0.2985468536212026, 0.70275078505783, 0.8883699736857691, 0.15608067706484263,
            0.9884639411023264, 0.534840687921669, 0.16268583528991298, 0.1772858881136712, 0.7170905836115287, 0.4757141962260585, 0.3077597993307635, 0.5660143782718494,
            0.3346004212288314, 0.34645743516404204, 0.23717530855396218, 0.6294930771984744, 0.21755075171340177, 0.013046584121998994, 0.901036271923812, 0.45315588885792235,
            0.036866593555884286, 0.0013744089211722432, 0.7687819886704956, 0.5399528476021299, 0.9546702128971704, 0.9852824448937644, 0.8726376700646647, 0.5434447993696888,
            0.7588975405760873, 0.47709737177157263, 0.5246460640830763, 0.09459173637352758, 0.6917137609276846, 0.49255276577595275, 0.7704210612958943, 0.9926510835585396,
            0.6310602188514373, 0.3106099213386516, 0.7492095190377014, 0.7073601260889995, 0.8442350221104342, 0.7035745198094567, 0.3925426766039519, 0.22258436427181327,
            0.7482306396340266, 0.1740390041733808, 0.31270414719708617, 0.7408714667808707, 0.9836213425160699, 0.802562390213194, 0.307436445044762, 0.6638584562037443,
            0.6371141995389771, 0.2836334223865623, 0.6387534561137, 0.5652373110464005, 0.632447571358195, 0.6073443111390779, 0.13142189012328565, 0.5809922143752687,
            0.15014084066751954, 0.6303364894909803, 0.18061935312924948, 0.7558793867839531, 0.4336704068838252, 0.47196161060413333, 0.9584727422933914, 0.40562813816958954,
            0.4929661868616221, 0.2702342191564381, 0.46562541596442397, 0.4810999804320052, 0.025694095692696872, 0.33703554349675124, 0.5866773425475955, 0.25364984174898364,
            0.3426097915956968, 0.16316022568970723, 0.9772873479939566, 0.3801918775095734, 0.20533914439423906, 0.04118099300040601, 0.43592224361707366, 0.551979758723363,
            0.2632619943640768, 0.2977387422941322, 0.3946825332295243, 0.4828691258830874, 0.21074497607942166, 0.2567488675615087, 0.30133027001601964, 0.9508382291489772,
            0.8767903646075998, 0.09114664534827344, 0.9585893282584422, 0.9707997269972588, 0.2062379893506192, 0.6631782921196866, 0.336984093273467, 0.9472452696725437,
            0.4949771182792808, 0.30187615152865177, 0.9839277900938401, 0.8320217812652965, 0.30119628766282813, 0.22124006857309697, 0.9144667847523249, 0.8955463015590637,
            0.1705187617638937, 0.9437792473793346, 0.7880328869662071, 0.7090241556031113, 0.6849419630246737, 0.6614522881302284, 0.25075049925629045, 0.33074298095641663,
            0.3738192215915729, 0.9396749891622, 0.5542914365265776, 0.4912728491255748, 0.7096928500130538, 0.5499496971806681, 0.9499645804610369, 0.7804106073006682,
            0.7526076178027078, 0.5028011274713937, 0.900674109063888, 0.4529645347714083, 0.0036041796644401547, 0.5450879601066094, 0.8535741594139521, 0.4909829785437019,
            0.6814120213606271, 0.4843912018963943, 0.17269373275619482, 0.986788341116056, 0.9459322503623605, 0.7080638320717105, 0.8435009767230828, 0.744186355371624,
            0.557920465228055, 0.17565840375501018, 0.7303209926891258, 0.23447710626996066, 0.08635055273466374, 0.9808329440026224, 0.4927169259848523, 0.6894035595577468,
            0.05326031853583868, 0.3024673447301426, 0.7483890363327362, 0.16492966731049474, 0.3404502794155748, 0.19460604143644622, 0.707842339643851, 0.8677494588366627,
            0.7732274797244421, 0.2009751560915065, 0.3000180250560771, 0.9006849030549041, 0.04345593235762457, 0.22220514848143624, 0.7582797458022655, 0.8536391838181834,
            0.037496401229159315, 0.41252304888556734, 0.7425909432049728, 0.3435293245905162, 0.19418765307465702, 0.13756081893917604, 0.3364145434775404, 0.6896301579643028,
            0.7338424388424456, 0.18605955860920464, 0.6758120246972789, 0.4000190729306009, 0.4713013088759639, 0.4956317297687073, 0.5434138538170592, 0.04031947241247058,
            0.45440759047838175, 0.6263768208172007, 0.9913788031873139, 0.35769778293600885, 0.8538377444059134, 0.09602799500767345, 0.9451547787016038, 0.24107754510730495,
            0.37104094610931837, 0.4764411235308069, 0.7837993320182519, 0.21279140383897466, 0.9281123284066689, 0.8436191945606406, 0.09281319758650663, 0.6673995438699677,
            0.5567450998642292, 0.7720989115341301, 0.14188551295894203, 1.61532366757422E-4, 0.2129759740503665, 0.5694086077283642, 0.15264463948606, 0.10065565442836222,
            0.7102598386082397, 0.857439436271531, 0.09045411719684593, 0.4262980433276998, 0.08547914273795865, 0.9249548023503559, 0.5394881150809374, 0.016021620883310606,
            0.49081412702486216, 0.49909562131354424, 0.20176645993530162, 0.35613265561376706, 0.13896995755702812, 0.7136218831700065, 0.6985244533047716, 0.9683705725786476,
            0.9200779791918849, 0.08776392732258331, 0.6462380512964836, 0.9544545388571124, 0.055657377502233096, 0.2719393938324265, 0.4298202434564823, 0.5019077511149015,
            0.5583451249137382, 0.1652247939365189, 0.7019497734741336, 0.5327092187151182, 0.32567134096165296, 0.7643536008073509, 0.4001887558311418, 0.2593289205065018,
    };

    private static final int f3[] = new int[]{4,
            0, 0, 1, 8, 2, 9, 4, 9, 1, 5, 2, 7, 4, 1, 6, 6, 7, 6, 9, 1, 2, 5, 5, 8, 3, 7, 9, 6, 3, 8, 5, 2, 8, 2, 7, 1, 4, 3, 7, 7, 9, 2, 4, 0, 2, 8, 5, 4, 4, 9,
            1, 7, 9, 9, 8, 7, 6, 0, 0, 6, 5, 5, 6, 1, 7, 5, 2, 0, 9, 5, 0, 6, 5, 0, 6, 3, 3, 0, 5, 9, 3, 4, 1, 6, 2, 8, 0, 2, 1, 0, 2, 9, 6, 9, 9, 4, 3, 7, 4, 9,
            6, 6, 9, 3, 1, 1, 3, 3, 1, 3, 8, 6, 0, 9, 7, 8, 6, 7, 3, 6, 6, 3, 6, 5, 2, 6, 6, 9, 2, 8, 4, 9, 6, 8, 6, 8, 4, 4, 2, 7, 3, 8, 6, 9, 3, 1, 7, 9, 7, 9,
            4, 5, 6, 4, 4, 5, 3, 0, 3, 2, 4, 1, 1, 5, 2, 4, 4, 3, 8, 8, 8, 6, 9, 5, 0, 8, 4, 8, 2, 5, 2, 2, 7, 1, 8, 9, 4, 0, 8, 1, 2, 0, 9, 0, 9, 9, 3, 9, 0, 4,
            6, 5, 7, 4, 2, 7, 6, 6, 1, 4, 9, 0, 0, 1, 5, 3, 4, 7, 7, 4, 0, 4, 9, 1, 6, 8, 9, 0, 8, 5, 6, 2, 0, 4, 7, 6, 9, 7, 4, 1, 5, 3, 2, 2, 0, 6, 0, 5, 1, 7,
            2, 0, 8, 3, 0, 5, 6, 1, 8, 1, 4, 2, 8, 7, 3, 0, 6, 7, 9, 7, 9, 1, 0, 0, 3, 1, 3, 2, 6, 3, 1, 1, 4, 3, 0, 4, 3, 6, 7, 8, 4, 8, 5, 3, 6, 1, 1, 2, 1, 7,
            3, 9, 8, 5, 5, 5, 5, 1, 4, 3, 0, 7, 4, 8, 0, 2, 5, 9, 4, 7, 2, 4, 1, 0, 8, 1, 3, 1, 4, 7, 0, 9, 2, 9, 5, 7, 2, 5, 5, 4, 2, 4, 8, 2, 3, 5, 5, 2, 5, 8,
            5, 6, 3, 3, 0, 2, 7, 6, 2, 1, 5, 4, 6, 8, 3, 3, 4, 3, 2, 7, 4, 7, 6, 6, 5, 6, 4, 1, 2, 7, 9, 0, 5, 3, 1, 4, 6, 5, 0, 5, 7, 9, 6, 3, 8, 6, 3, 6, 0, 2,
            5, 2, 4, 6, 1, 5, 0, 9, 2, 5, 4, 0, 1, 9, 2, 3, 0, 9, 1, 1, 6, 5, 4, 3, 0, 9, 2, 0, 1, 4, 8, 8, 8, 2, 9, 9, 0, 1, 9, 0, 9, 7, 7, 5, 8, 1, 0, 6, 3, 6,
            9, 8, 1, 4, 6, 4, 1, 7, 0, 1, 0, 5, 2, 3, 0, 0, 0, 5, 6, 9, 2, 9, 1, 6, 8, 9, 3, 6, 0, 2, 4, 1, 7, 2, 7, 9, 8, 3, 5, 4, 3, 8, 5, 0, 4, 5, 9, 6, 6, 9,
            3, 4, 3, 6, 0, 0, 5, 1, 7, 5, 1, 6, 5, 0, 8, 4, 1, 6, 8, 9, 0, 7, 8, 9, 0, 3, 1, 3, 8, 0, 9, 7, 3, 2, 1, 6, 4, 1, 9, 5, 3, 4, 1, 0, 2, 6, 7, 4, 2, 2,
            8, 6, 9, 6, 5, 0, 8, 1, 5, 1, 4, 5, 7, 8, 5, 2, 5, 1, 9, 9, 9, 2, 2, 4, 6, 6, 7, 9, 2, 4, 9, 0, 6, 7, 8, 8, 5, 9, 9, 3, 0, 1, 3, 4, 3, 7, 5, 3, 7, 7,
    };

    //TODO use light switch scenario from the dataset as well?

    /**
     * Simplest available test for "guess the switch" scenario.
     *
     * Simplifications:
     * - When the light is off, the light level is 0.
     * - When the light is on, the light level is strictly 500 Lx.
     * - There is no lag. Once switch is on, the light turns on immediately.
     * - User turns some switch on, then off. No two switches are on at the same time.
     *
     * One loop over the switches should be enough to detect the proper configuration.
     *
     * Later tests will add more realistic assumptions.
     */
    @Test
    public void noDelaySwitchResponse() {
        for (int cs = 0; cs < NUM_SWITCHES; cs++){
            final int correctSwitch = cs; //Have to make it final for inner class access
            final int LIGHT_ON_LX = 500;
            final int LIGHT_OFF_LX = 0;
            final int NUM_OF_TRIALS = NUM_SWITCHES; //One swipe

            final Graph graph = new GraphBuilder().withPlugin(new MLXPlugin()).withScheduler(new NoopScheduler()).build();
            graph.connect(new Callback<Boolean>() {
                @Override
                public void on(Boolean result) {
                    LinearRegressionNode lrNode = (LinearRegressionNode) graph.newTypedNode(0, 0, LinearRegressionNode.NAME);
                    lrNode.setProperty(AbstractLinearRegressionNode.BUFFER_SIZE_KEY, Type.INT, NUM_OF_TRIALS);
                    lrNode.setProperty(AbstractLinearRegressionNode.LOW_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.setProperty(AbstractLinearRegressionNode.HIGH_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.set(AbstractMLNode.FROM, SWITCHES_STRING);

                    double switchValues[] = new double[NUM_SWITCHES];
                    for (int i=0;i<NUM_SWITCHES;i++){
                        switchValues[i] = 0;
                    }

                    RegressionJumpCallback rjc = new RegressionJumpCallback(FEATURES);
                    for (int i = 0; i < NUM_OF_TRIALS; i++) {
                        int chosenSwitch = i % NUM_SWITCHES;
                        switchValues[chosenSwitch] = 1;
                        rjc.value = switchValues;
                        rjc.response = (chosenSwitch==correctSwitch)?LIGHT_ON_LX:LIGHT_OFF_LX;
                        lrNode.jump(2*i, new Callback< Node >() {
                            @Override
                            public void on(Node result) {
                                rjc.on((AbstractLinearRegressionNode) result);
                            }
                        });
                        switchValues[chosenSwitch] = 0;
                        rjc.value = switchValues;
                        rjc.response = 0;
                        lrNode.jump(2*i+1, new Callback< Node >() {
                            @Override
                            public void on(Node result) {
                                rjc.on((AbstractLinearRegressionNode) result);
                            }
                        });
                        //We don't care about bootstrap mode here
                    }
                    //System.out.println(errorString);
                    lrNode.jump(2*NUM_OF_TRIALS, new Callback< Node >() {
                        @Override
                        public void on(Node result) {
                            rjc.on((AbstractLinearRegressionNode) result);
                        }
                    }); //Just in case correct switch is the last one.
                    // In that case it will cause going to bootstrap. 1 timestamp to get out.
                    assertFalse(rjc.bootstrapMode);

                    lrNode.free();
                    graph.disconnect(null);

                    for (int i=0;i<NUM_SWITCHES;i++) {
                        assertTrue(Math.abs(rjc.coefs[i] - ((i==correctSwitch)?LIGHT_ON_LX:LIGHT_OFF_LX)) < 1e-4);
                    }
                    assertTrue(Math.abs(rjc.intercept) < 1e-4);
                    assertTrue(rjc.bufferError < 1e-4);
                    assertTrue(rjc.l2Reg < 1e-4);
                }
            });
        }
    }

    static int rngIndex;
    static int doubleIndex;

    /**
     * Just slightly more complicated version. Now the switches do not go back to off.
     *
     * Simplifications:
     * - When the light is off, the light level is 0.
     * - When the light is on, the light level is strictly 500 Lx.
     * - There is no lag. Once switch is on, the light turns on immediately.
     * - User turn switches on or off randomly. Initially all switches are off.
     *
     * When correct switch is tried at least once, it should be enough to detect the proper configuration.
     *
     * Later tests will add more realistic assumptions.
     */
    @Test
    public void noDelayRandomClickingSwitchResponse() {
         final int LIGHT_ON_LX = 500;
        final int LIGHT_OFF_LX = 0;
        final int BUFF_SIZE = 10;

        rngIndex = 0;

        for (int cs = 0; cs < NUM_SWITCHES; cs++) {
            final int correctSwitch = cs; //Have to make it final for inner class access
            //System.out.println("Correct switch: "+correctSwitch);

            final Graph graph = new GraphBuilder().withPlugin(new MLXPlugin()).withScheduler(new NoopScheduler()).build();
            graph.connect(new Callback<Boolean>() {
                @Override
                public void on(Boolean result) {
                    LinearRegressionNode lrNode = (LinearRegressionNode) graph.newTypedNode(0, 0, LinearRegressionNode.NAME);
                    lrNode.setProperty(AbstractLinearRegressionNode.BUFFER_SIZE_KEY, Type.INT, BUFF_SIZE);
                    lrNode.setProperty(AbstractLinearRegressionNode.LOW_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.setProperty(AbstractLinearRegressionNode.HIGH_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.set(AbstractMLNode.FROM, SWITCHES_STRING);

                    double switchValues[] = new double[NUM_SWITCHES];
                    for (int i=0;i<NUM_SWITCHES;i++){
                        switchValues[i] = 0;
                    }

                    RegressionJumpCallback rjc = new RegressionJumpCallback(FEATURES);
                    boolean triedCorrectSwitch = false;
                    int index = 0;
                    while(!triedCorrectSwitch || index<2) { //Need at least 2 samples. Otherwise we can't distinguish from intercept.
                        int chosenSwitch = f1Array[rngIndex++];
                        triedCorrectSwitch = (chosenSwitch==correctSwitch);
                        switchValues[chosenSwitch] = (switchValues[chosenSwitch]==0)?1:0;
                        rjc.value = switchValues;
                        rjc.response = (switchValues[correctSwitch] == 1)?LIGHT_ON_LX:LIGHT_OFF_LX;
                        lrNode.jump(index, new Callback< Node >() {
                            @Override
                            public void on(Node result) {
                                rjc.on((AbstractLinearRegressionNode) result);
                            }
                        });
                        index++;
                    }
                    //System.out.println(errorString);
                    lrNode.jump(index, new Callback< Node >() {
                        @Override
                        public void on(Node result) {
                            rjc.on((AbstractLinearRegressionNode) result);
                        }
                    });
                    index++; //Make sure index contains
                    //TODO Should I implement jumping in and out of bootstrap mode at the same time?
                    if (index < BUFF_SIZE){
                        assertTrue(rjc.bootstrapMode);
                    }else{
                        assertFalse(rjc.bootstrapMode);
                    }


                    lrNode.free();
                    graph.disconnect(null);

                    for (int i=0;i<NUM_SWITCHES;i++) {
                        assertTrue(Math.abs(rjc.coefs[i] - ((i==correctSwitch)?LIGHT_ON_LX:LIGHT_OFF_LX)) < 1e-4);
                    }
                    assertTrue(Math.abs(rjc.intercept) < 1e-4);
                    assertTrue(rjc.bufferError < 1e-4);
                    assertTrue(rjc.l2Reg < 1e-4);
                }
            });
        }
    }


    /**
     * Adding more assumptions. Now light level is a bit randomized.
     *
     * Simplifications:
     * - When the light is off, the light level is uniformly distributed between 0-30 Lx.
     * - When the light is on, the light level is uniformly distributed between 450-550 Lx.
     * - There is no lag. Once switch is on, the light turns on immediately.
     * - User turn switches on or off randomly. Initially all switches are off.
     *
     * When correct switch is tried at least once, it should be enough to detect the proper configuration.
     *
     * Later tests will add more realistic assumptions.
     */
    @Test
    public void noDelayRandomLightLevelSwitchResponse() {
        final int BUFF_SIZE = 10;
        rngIndex = 0;
        doubleIndex = 0;

        for (int cs = 0; cs < NUM_SWITCHES; cs++) {
            final int correctSwitch = cs; //Have to make it final for inner class access
            //System.out.println("Correct switch: "+correctSwitch);

            final Graph graph = new GraphBuilder().withPlugin(new MLXPlugin()).withScheduler(new NoopScheduler()).build();
            graph.connect(new Callback<Boolean>() {
                @Override
                public void on(Boolean result) {
                    LinearRegressionNode lrNode = (LinearRegressionNode) graph.newTypedNode(0, 0, LinearRegressionNode.NAME);
                    lrNode.setProperty(AbstractLinearRegressionNode.BUFFER_SIZE_KEY, Type.INT, BUFF_SIZE);
                    lrNode.setProperty(AbstractLinearRegressionNode.LOW_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.setProperty(AbstractLinearRegressionNode.HIGH_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.set(AbstractMLNode.FROM, SWITCHES_STRING);

                    double switchValues[] = new double[NUM_SWITCHES];
                    for (int i = 0; i < NUM_SWITCHES; i++) {
                        switchValues[i] = 0;
                    }

                    RegressionJumpCallback rjc = new RegressionJumpCallback(FEATURES);
                    boolean triedCorrectSwitch = false;
                    int index = 0;
                    while (!triedCorrectSwitch || index<2) {
                        int chosenSwitch = f2Array[rngIndex];
                        rngIndex = rngIndex+1;
                        triedCorrectSwitch = (chosenSwitch == correctSwitch);
                        switchValues[chosenSwitch] = (switchValues[chosenSwitch] == 0) ? 1 : 0;
                        rjc.value = switchValues;
                        rjc.response = (switchValues[correctSwitch] == 1) ? (f2DoubleArray[doubleIndex] * 50 + 450) : (f2DoubleArray[doubleIndex] * 30);
                        doubleIndex = doubleIndex+1;
                        //System.out.println(switchValues[0]+"\t"+switchValues[1]+"\t"+switchValues[2]+"\t"+switchValues[3]+"\t"+switchValues[4]+"\t"+switchValues[5]+"\t"+rjc.response);
                        lrNode.jump(index, new Callback< Node >() {
                            @Override
                            public void on(Node result) {
                                rjc.on((AbstractLinearRegressionNode) result);
                            }
                        });
                        index++;
                    }
                    lrNode.jump(index, new Callback< Node >() {
                        @Override
                        public void on(Node result) {
                            rjc.on((AbstractLinearRegressionNode) result);
                        }
                    }); //For already established model this new data can throw it back into bootstrap. Need 1 more point to recover.
                    index++;
                    //TODO Should I implement jumping in and out of bootstrap mode at the same time?
                    //Might as well be bootstrap - too few in the window.
                    //index++;
                    if (index < BUFF_SIZE){
                        assertTrue(rjc.bootstrapMode);
                    }else{
                        assertFalse(rjc.bootstrapMode);
                    }

                    lrNode.free();
                    graph.disconnect(null);

                    //One coefficient needs to be dominating
                    for (int i = 0; i < NUM_SWITCHES; i++) {
                        if (i == correctSwitch){
                            assertTrue(rjc.coefs[i] > 400);
                        }else{
                            assertTrue(rjc.coefs[i] < 45);
                        }
                    }
                    assertTrue(Math.abs(rjc.intercept) < 40);
                    //assertTrue(errorString, rjc.bufferError < 1e-4);
                    assertTrue(rjc.l2Reg < 1e-4);
                }
            });
        }
    }

    /**
     * Adding even more assumptions.
     *
     * Simplifications:
     * - When the light is off, the light level is uniformly distributed between 0-30 Lx.
     * - When the light is on, the light level is uniformly distributed between 450-550 Lx.
     * - There is a lag of 1 timeframe between turning on the switch and light level being reported.
     * - User turn switches on or off randomly. Initially all switches are off.
     *
     * When correct switch is tried at least once, it should be enough to detect the proper configuration.
     *
     * Later tests will add more realistic assumptions.
     */
    @Test
    public void delayedRandomLightLevelSwitchResponse() {
        final int LAG = 1; //Timeframes between turning the switch and seeing light change
        final int AFTER_TIMEFRAMES = 7; //Timeframes when everything is working normally after light level is reported

        final int BUFF_SIZE = 10*(LAG+AFTER_TIMEFRAMES);

        rngIndex = 0;
        doubleIndex = 0;

        for (int cs = 0; cs < NUM_SWITCHES; cs++) {
            final int correctSwitch = cs; //Have to make it final for inner class access

            final Graph graph = new GraphBuilder().withPlugin(new MLXPlugin()).withScheduler(new NoopScheduler()).build();
            graph.connect(new Callback<Boolean>() {
                @Override
                public void on(Boolean result) {
                    LinearRegressionNode lrNode = (LinearRegressionNode) graph.newTypedNode(0, 0, LinearRegressionNode.NAME);
                    lrNode.setProperty(AbstractLinearRegressionNode.BUFFER_SIZE_KEY, Type.INT, BUFF_SIZE);
                    lrNode.setProperty(AbstractLinearRegressionNode.LOW_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.setProperty(AbstractLinearRegressionNode.HIGH_ERROR_THRESH_KEY, Type.DOUBLE, 100.0);
                    lrNode.set(AbstractMLNode.FROM, SWITCHES_STRING);

                    double switchValues[] = new double[NUM_SWITCHES];
                    for (int i = 0; i < NUM_SWITCHES; i++) {
                        switchValues[i] = 0;
                    }
                    final RegressionJumpCallback rjc = new RegressionJumpCallback(FEATURES);
                    rjc.response = f3DoubleArray[doubleIndex] * 20;
                    doubleIndex++;

                    boolean triedCorrectSwitch = false;
                    int index = 0;
                    while (!triedCorrectSwitch || index<2*(LAG+AFTER_TIMEFRAMES)) {
                        int chosenSwitch = f3[rngIndex];
                        rngIndex = rngIndex+1;
                        triedCorrectSwitch = (chosenSwitch == correctSwitch);
                        switchValues[chosenSwitch] = (switchValues[chosenSwitch] == 0) ? 1 : 0;
                        rjc.value = switchValues;
                        //New values, old response
                        for (int i=0;i<LAG;i++){
                            lrNode.jump(index, new Callback< Node >() {
                                @Override
                                public void on(Node result) {
                                    rjc.on((AbstractLinearRegressionNode) result);
                                }
                            });
                            index++;
                        }
                        rjc.response = (switchValues[correctSwitch] == 1) ? (f3DoubleArray[doubleIndex] * 100 + 450) : (f3DoubleArray[doubleIndex] * 20);
                        doubleIndex = doubleIndex+1;
                        //New values & new response
                        for (int i=0;i<AFTER_TIMEFRAMES;i++){
                            lrNode.jump(index, new Callback< Node >() {
                                @Override
                                public void on(Node result) {
                                    rjc.on((AbstractLinearRegressionNode) result);
                                }
                            });
                            index++;
                        }
                    }
                    lrNode.jump(index, new Callback< Node >() {
                        @Override
                        public void on(Node result) {
                            rjc.on((AbstractLinearRegressionNode) result);
                        }
                    }); //For already established model this new data can throw it back into bootstrap. Need 1 more point to recover.
                    index++;
                    //TODO Should I implement jumping in and out of bootstrap mode at the same time?
                    //assertFalse(errorString, rjc.bootstrapMode);

                    lrNode.free();
                    graph.disconnect(null);

                    //One coefficient needs to be dominating
                    for (int i = 0; i < NUM_SWITCHES; i++) {
                        if (i == correctSwitch){
                            assertTrue(rjc.coefs[i] > 370);
                        }else{
                            assertTrue(rjc.coefs[i] < 71);
                        }
                    }
                    assertTrue(Math.abs(rjc.intercept) < 25);
                    //assertTrue(errorString, rjc.bufferError < 1e-4); //there can be quite a lot of buffer error, actually
                    assertTrue(rjc.l2Reg < 1e-4);
                }
            });
        }
    }
}
